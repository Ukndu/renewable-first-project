#!/usr/bin/env python
# coding: utf-8

# In[1]:


import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from dash import Input, Output, dcc, html, Dash
import plotly.express as px


# In[2]:


df = pd.read_csv(r'C:\Users\USER\Desktop\DATA PROJECT\global-data-on-sustainable-energy (1).csv')
df


# In[3]:


#what to do with the data
#I can make an interactive web app that shows the vavrious data points based on country
#I could take one country and show some information
#I could extract information based on region


# In[4]:


#building the interactive web app
#I want to build a dynamic interface that shows the data of Nigeria, show how its been developing


# In[5]:


#Explore the data
#clean the data


# In[6]:


df.info()


# In[7]:


df = df.drop(columns = ['Latitude', 'Longitude'])


# In[8]:


df.info()


# In[9]:


mask = df["Entity"] == 'Nigeria'
df_nigeria = df[mask]


# In[10]:


df_nigeria.info()


# In[11]:


#drop un used columns
df_nigeria= df_nigeria.drop(columns = ['Land Area(Km2)','Density\\n(P/Km2)','Renewables (% equivalent primary energy)','Financial flows to developing countries (US $)'])


# In[12]:


df_nigeria= df_nigeria.reset_index()


# In[13]:


df_nigeria.info()


# In[14]:


df_nigeria.describe()


# In[15]:


df_nigeria= df_nigeria.interpolate()


# In[16]:


#what have the trends be how has nigerias consumption changed?


# In[ ]:





# In[17]:


#making visualizations
#its in relation to the year
px.line(
    data_frame = df_nigeria,
    x = 'Year',
    y = 'Access to electricity (% of population)',
    title = 'Access to Electricity'
)


# In[18]:


px.bar(
    data_frame= df_nigeria,
    x = 'Year',
    y= 'Value_co2_emissions_kt_by_country',
    title = 'CO2 Emissions based on Year'
)


# In[19]:


px.bar(
    data_frame= df_nigeria,
    x = 'Year',
    y= 'Electricity from fossil fuels (TWh)'
    #title =
)


# In[20]:


px.bar(
    data_frame= df_nigeria,
    x = 'Year',
    y= 'Electricity from renewables (TWh)'
    #title =
)


# In[21]:


px.line(
    data_frame= df_nigeria,
    x = 'Year',
    y= 'Primary energy consumption per capita (kWh/person)'
    #title =
)


# In[22]:


#making a country picker that shows its sustainability trends
#creating a wrangle function
def wrangle(filename):
    #read the csv
    df = pd.read_csv(filename)
    #drop the unused columns
    df= df.drop(columns = ['Land Area(Km2)','Density\\n(P/Km2)','Renewables (% equivalent primary energy)','Financial flows to developing countries (US $)','Latitude', 'Longitude', 'gdp_growth', 'gdp_per_capita'])
    #filling in empty values
    df = df.interpolate()

    return df


# In[23]:


df = wrangle(r'C:\Users\USER\Desktop\DATA PROJECT\global-data-on-sustainable-energy (1).csv')
df.info()


# In[24]:


#business layer
#building the get country name picker
#1 get the country name
country_names = df['Entity']
list_of_countries = country_names.unique()


# In[25]:


external_stylesheets = [
    {
        "href": (
            "https://fonts.googleapis.com/css2?"
            "family=Lato:wght@400;700&display=swap"
        ),
        "rel": "stylesheet"
    }
]


# In[26]:


app = Dash(__name__, prevent_initial_callbacks=True, external_stylesheets=external_stylesheets)
server = app.server

# In[27]:


def country_picker(country):
    df = wrangle(r'C:\Users\USER\Desktop\DATA PROJECT\global-data-on-sustainable-energy (1).csv')
    mask = df['Entity'] == country
    df = df[mask]
    return df



# In[28]:


app.title = "Sustainability Data"
app.layout= html.Div(
    [html.Div( children = [ #the application title
    html.H1('Sustainability Trends By Country', className= "header-title"),

    html.P('These graphs show the energy consumption habits of various countries, giving insight on how efficient their energy generation is', className= "header-description"),
    #Putting the country selector slider
    html.Div( children = [
                html.Div('Select Country', className= "header-description2"),
                dcc.Dropdown(id = 'country-selector',
                            options = [{'label': country, 'value': country}
                                     for country in list_of_countries
                                     ])
                   ])], className= "header"),

    #title
    html.H2('% of Population That has Access to Power'),
    dcc.Graph(id = 'Population-Access', className= "card"),
    html.H2('Energy Consumption'),
    dcc.Graph(id='Energy Consumption', className= "card"),
    html.H2('CO2 Emission'),
    dcc.Graph(id = 'CO2 Emission', className= "card"),
    html.H2('Energy Generated By Fossil Fuel'),
    dcc.Graph(id = 'Fossil Fuel', className= "card"),
    html.H2('Energy Generated By Renewable Energy'),
    dcc.Graph(id = 'Renewable Energy')

], className= "wrapper"
)


# In[29]:


frame = country_picker("Nigeria")
frame
fig = px.line(
    data_frame = frame,
    x = 'Year',
    y = 'Access to electricity (% of population)'
)
fig


# In[30]:


#service layer
#building the service layers
@app.callback(
    Output("Population-Access", "figure"),
    Input("country-selector", "value")
)
def get_pop_power(country):
    frame = country_picker(country)
    fig = px.line(
    data_frame = frame,
    x = 'Year',
    y = 'Access to electricity (% of population)',

)
    fig.update_layout(xaxis=dict(showgrid=False),
              yaxis=dict(showgrid=False)
)
    return fig


# In[31]:


#service layer
@app.callback(
    Output("Energy Consumption", "figure"),
    Input("country-selector", "value")
)
def energy_consumption(country):
    frame = country_picker(country)
    fig = px.line(
    data_frame = frame,
    x = 'Year',
    y= 'Primary energy consumption per capita (kWh/person)'

)
    fig.update_layout(xaxis=dict(showgrid=False),
              yaxis=dict(showgrid=False)
)
    return fig


# In[32]:


@app.callback(
    Output("CO2 Emission", "figure"),
    Input("country-selector", "value")
)
def co2_emission(country):
    frame = country_picker(country)
    fig = px.line(
    data_frame = frame,
    x = 'Year',
    y= 'Value_co2_emissions_kt_by_country'
)
    fig.update_layout(xaxis=dict(showgrid=False),
              yaxis=dict(showgrid=False)
)
    return fig


# In[33]:


@app.callback(
    Output("Fossil Fuel", "figure"),
    Input("country-selector", "value")
)
def fossil_fuel(country):
    frame = country_picker(country)
    fig = px.line(
    data_frame = frame,
    x = 'Year',
    y= 'Electricity from fossil fuels (TWh)'
)
    fig.update_layout(xaxis=dict(showgrid=False),
              yaxis=dict(showgrid=False)
)
    return fig


# In[34]:


@app.callback(
    Output("Renewable Energy", "figure"),
    Input("country-selector", "value")
)
def renewables(country):
    frame = country_picker(country)
    fig = px.line(
    data_frame = frame,
    x = 'Year',
    y= 'Electricity from renewables (TWh)'
)
    fig.update_layout(xaxis=dict(showgrid=False),
              yaxis=dict(showgrid=False)
)
    return fig


# In[35]:


country_picker("Nigeria")


# In[36]:


#running the app
if __name__ == "__main__":
    app.run_server(debug=False)


# In[37]:


get_ipython().system('jupyterlab nbconvert --to script config_template.ipynb')


# In[38]:


get_ipython().run_line_magic('pip', 'install nbconvert')


# In[40]:


get_ipython().system('jupyter nbconvert --to script "First project".ipynb')


# In[ ]:
